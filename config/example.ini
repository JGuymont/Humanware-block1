[paths]
; Path to the train metadata
train_metadata = ./data/SVHN/metadata/train_metadata.pkl
; Path to the validation metadata
valid_metadata = ./data/SVHN/metadata/valid_metadata.pkl
; Path to the test metadata
test_metadata = ./data/SVHN/metadata/test_metadata.pkl
; Path to the data
data_dir = ./data/SVHN/train/
; Where to save the checkpoints
checkpoints = ./checkpoints/
; Where to save the results (losses and accuracies)
results = ./results

[splits]
; Percentage of training set to use for training
train_pct = 0.7
; Percentage of training set to use for validation
valid_pct = 0.2
; Percentage of training set to use for testing
; (since no access to real test set)
test_pct = 0.1

[log]
; Frequency with which to print info about the current epoch
iteration_print_freq = 50

[model]
; Model class name or function to build model
name = senet
; Device on which to train
device = gpu
; Whether to use the pretraind architecture or not
pretrained = True
; Where to download and load the pretrained weights
pretrained_checkpoint_path = ./models
; Path to a checkpoint to load
checkpoint = ./checkpoints/senet/best_94.0269.pth

; Number of classes to predict
num_classes = 7
; Number of epochs to train
n_epochs = 100
; At which epoch to start the training
epoch_start = 0
; Size of batch for training
batch_size = 10

; Optimizer to use for training
optim = Adam
; Learning rate to use with the optimizer
learning_rate = 0.0001
; Momentum for the SGD optimizer
momentum = 0.9
; Weight decay for the SGD optimizer
weight_decay = 5e-4
; beta parameters for Adam optimizer
betas = [0.5,0.999]

[preprocessing]
; Percentage to crop around the bounding box
crop_percent = 0.3

; Brightness setting of the Color Jitter data augmentation
colorJitter_brightness = 0.5
; Contrast setting of the Color Jitter data augmentation
colorJitter_contrast = 0.5
; Saturation setting of the Color Jitter data augmentation
colorJitter_saturation = 0.5

; Range of rotation for Random Rotation data augmentation ([-degrees, degrees])
randomRotation_degrees = 20

; Range of degrees to choose from for Random Affine data augmentation
randomAffine_degrees = 10
; Range of degrees to choose from for Random Affine data augmentation
randomAffine_shear = 20
; Value for resizing the input images, changes depending on the
; model's expected input size
; (normally 54 but 224 for SENet pretrained on ImageNet)
resize = 54